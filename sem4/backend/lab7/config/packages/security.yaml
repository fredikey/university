security:
    enable_authenticator_manager: true
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        backend_users:
            memory:
                users:
                    admin: { password: '$argon2id$v=19$m=65536,t=4,p=1$CkHScuaCd3Uk4B9yit8prA$O8DiPCW1lsnfIk0bRg0hkoY5hxwFbscUS/eLN3GioPg', roles: ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN', 'IS_AUTHENTICATED_ANONYMOUSLY'] }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/v1/test/login
            stateless: true
            json_login:
                check_path:               /api/v1/test/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
#        main:
#            pattern: ^/api
#            http_basic:
#                realm: You shall not pass

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1/test/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }